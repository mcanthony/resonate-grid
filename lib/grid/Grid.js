// Generated by CoffeeScript 1.9.1
(function() {
  var Config, Grid, PIXI, Rect2, Vec2, noisejs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Config = require('../utils/Config');

  noisejs = require('../utils/noise');

  Vec2 = require('../utils/Vec2');

  Rect2 = require('../utils/Rect2');

  PIXI = require('pixi');

  Grid = (function() {
    Grid.prototype.w = null;

    Grid.prototype.h = null;

    Grid.prototype.graphs = null;

    Grid.prototype.grid = null;

    Grid.prototype.r = null;

    Grid.prototype.speed = 1.5;

    Grid.prototype.mult = .0001;

    Grid.prototype.alpha = 0;

    Grid.prototype.showGrid = false;

    Grid.prototype.playing = true;

    function Grid(size, rows, showGrid) {
      var a, c, g, i, j, k, ref, ref1, ref2;
      this.size = size;
      this.rows = rows != null ? rows : 0;
      this.showGrid = showGrid != null ? showGrid : false;
      this.resize = bind(this.resize, this);
      this.hittest = bind(this.hittest, this);
      this.update = bind(this.update, this);
      this.grid = new PIXI.DisplayObjectContainer();
      this.noise = new noisejs.SimplexNoise;
      ref = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
      this.rows = this.rows === 0 ? this.size : this.rows;
      this.graphs = [];
      this.w = ref / this.size;
      this.h = ref / this.size;
      c = 0;
      this.alpha = this.showGrid ? .5 : 0;
      for (i = j = 0, ref1 = this.rows; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        for (a = k = 0, ref2 = this.size; 0 <= ref2 ? k < ref2 : k > ref2; a = 0 <= ref2 ? ++k : --k) {
          g = new PIXI.Graphics();
          g.line = i;
          g.lineStyle(1, 0xCCCCCC, this.alpha);
          g.beginFill(0xFFFFFF, this.alpha);
          g.drawRect(0, 0, this.w, this.h);
          g.position = new PIXI.Point(a * this.w, i * this.h);
          g.x = a * this.w;
          g.y = i * this.h;
          g.id = c;
          g.change = false;
          g.rect = new Rect2(g.x, g.y, this.w, this.h);
          this.graphs.push(g);
          this.grid.addChild(g);
          c++;
        }
      }
      null;
    }

    Grid.prototype.update = function() {
      this.alpha = this.showGrid ? .5 : 0;
      return this.hittest();
    };

    Grid.prototype.hittest = function() {
      var b, changed, g, j, len, n, ref1;
      if (this.playing !== true) {
        return;
      }
      changed = [];
      ref1 = this.graphs;
      for (j = 0, len = ref1.length; j < len; j++) {
        g = ref1[j];
        n = this.noise.noise3(g.x, g.y, this.speed * Date.now() * this.mult);
        b = n > 0;
        g.clear();
        g.lineStyle(1, 0xCCCCCC, this.alpha);
        g.beginFill((b ? 0xCCCCCC : 0xFFFFFF), this.alpha);
        g.drawRect(0, 0, this.w, this.h);
        if (b) {
          changed.push(g.id);
        }
      }
      return changed;
    };

    Grid.prototype.resize = function() {
      var g, i, j, len, ref, ref1;
      ref = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
      this.w = ref / this.size;
      this.h = ref / this.size;
      i = 0;
      ref1 = this.graphs;
      for (j = 0, len = ref1.length; j < len; j++) {
        g = ref1[j];
        g.clear();
        g.lineStyle(1, 0xCCCCCC, this.alpha);
        g.beginFill(0xFFFFFF, this.alpha);
        g.drawRect(0, 0, this.w, this.h);
        g.position = new PIXI.Point((i % this.size) * this.w, g.line * this.h);
        g.x = (i % this.size) * this.w;
        g.y = g.line * this.h;
        g.rect = new Rect2(g.x, g.y, this.w, this.h);
        i++;
      }
      return null;
    };

    return Grid;

  })();

  module.exports = Grid;

}).call(this);
