// Generated by CoffeeScript 1.9.1
(function() {
  var BasicObject, Config, PIXI,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Config = require('../utils/Config');

  PIXI = require('pixi');

  BasicObject = (function() {
    BasicObject.prototype.g = null;

    BasicObject.prototype.lineWidth = 16;

    BasicObject.prototype.stage = null;

    BasicObject.prototype.ctx = null;

    BasicObject.prototype.gradColor = null;

    BasicObject.prototype.grad = null;

    BasicObject.prototype.offLine = 0;

    BasicObject.prototype.showing = false;

    function BasicObject(array) {
      this.height = bind(this.height, this);
      this.width = bind(this.width, this);
      this.clear = bind(this.clear, this);
      this.moveTo = bind(this.moveTo, this);
      this.setSize = bind(this.setSize, this);
      this.startDraw = bind(this.startDraw, this);
      this.animate = bind(this.animate, this);
      this.resetShowAnim = bind(this.resetShowAnim, this);
      this.callAnimate = bind(this.callAnimate, this);
      this.init = bind(this.init, this);
      var h, w;
      this.stage = array[0];
      w = array[1];
      h = array[2];
      this.changePos = array[3];
      this.setSize(w, h);
      this.g = new PIXI.Sprite(PIXI.Texture.Draw((function(_this) {
        return function(canvas) {
          canvas.width = _this.size[0];
          canvas.height = _this.size[1];
          return _this.ctx = canvas.getContext('2d');
        };
      })(this)));
      this.g.texture.requiresUpdate = true;
      this.offLine = this.lineWidth / 2;
      this.init();
      null;
    }

    BasicObject.prototype.init = function() {
      this.gradColor = Config.GRADIENTS[Math.round(Math.random() * (Config.GRADIENTS.length - 1))];
      this.grad = this.ctx.createLinearGradient(0, 0, this.size[0], 0);
      this.grad.addColorStop(0, this.gradColor[0]);
      this.grad.addColorStop(1, this.gradColor[1]);
      return null;
    };

    BasicObject.prototype.callAnimate = function() {
      if (this.showing) {
        return;
      }
      this.animate();
      return null;
    };

    BasicObject.prototype.resetShowAnim = function() {
      this.clear();
      if (typeof this.changePos === "function") {
        this.changePos(this);
      }
      setTimeout((function(_this) {
        return function() {
          return _this.showing = false;
        };
      })(this), 2000);
      return null;
    };

    BasicObject.prototype.animate = function(out) {
      if (out == null) {
        out = false;
      }
      if (out) {
        this.ctx.globalCompositeOperation = "destination-out";
      } else {
        this.ctx.globalCompositeOperation = "source-over";
        this.showing = true;
      }
      this.startDraw();
      return null;
    };

    BasicObject.prototype.startDraw = function() {
      this.ctx.closePath();
      this.ctx.rotate(0);
      this.ctx.beginPath();
      this.ctx.strokeStyle = this.grad;
      this.ctx.lineWidth = this.lineWidth;
      return null;
    };

    BasicObject.prototype.setSize = function(x, y) {
      if (y == null) {
        y = 0;
      }
      this.size = [Math.abs(this.lineWidth + x), Math.abs((y === 0 ? x : y) + this.lineWidth)];
      return null;
    };

    BasicObject.prototype.moveTo = function(x, y) {
      this.ctx.moveTo(x + this.offLine, y + this.offLine);
      return null;
    };

    BasicObject.prototype.clear = function() {
      this.ctx.clearRect(0, 0, this.size[0], this.size[1]);
      return null;
    };

    BasicObject.prototype.width = function() {
      return this.size[0];
    };

    BasicObject.prototype.height = function() {
      return this.size[1];
    };

    return BasicObject;

  })();

  module.exports = BasicObject;

}).call(this);
