// Generated by CoffeeScript 1.9.1
(function() {
  var BasicObject, Config, DiagonalLine, TweenMax,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Config = require('../utils/Config');

  BasicObject = require('./BasicObject');

  TweenMax = require('gsap');

  DiagonalLine = (function(superClass) {
    extend(DiagonalLine, superClass);

    function DiagonalLine() {
      this.animate = bind(this.animate, this);
      return DiagonalLine.__super__.constructor.apply(this, arguments);
    }

    DiagonalLine.prototype.animate = function(out) {
      var a;
      if (out == null) {
        out = false;
      }
      DiagonalLine.__super__.animate.call(this, out);
      this.ctx.moveTo(this.offLine, this.offLine);
      a = {
        w: 0
      };
      TweenMax.to(a, .3, {
        delay: 1 - parseInt(out),
        w: this.size[0] - this.lineWidth,
        onUpdate: (function(_this) {
          return function() {
            _this.ctx.lineTo(a.w + _this.offLine, _this.offLine);
            return _this.ctx.stroke();
          };
        })(this),
        onComplete: (function(_this) {
          return function() {
            if (!out) {
              return setTimeout(_this.animate, 2000, true);
            } else {
              return _this.resetShowAnim();
            }
          };
        })(this)
      });
      return null;
    };

    return DiagonalLine;

  })(BasicObject);

  module.exports = DiagonalLine;

}).call(this);
