// Generated by CoffeeScript 1.9.1
(function() {
  var BasicObject, Config, OpenSquare, TweenMax,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Config = require('../utils/Config');

  BasicObject = require('./BasicObject');

  TweenMax = require('gsap');

  OpenSquare = (function(superClass) {
    extend(OpenSquare, superClass);

    function OpenSquare() {
      this.animateLine2 = bind(this.animateLine2, this);
      this.animate = bind(this.animate, this);
      return OpenSquare.__super__.constructor.apply(this, arguments);
    }

    OpenSquare.prototype.out = false;

    OpenSquare.prototype.animate = function(out) {
      var a;
      if (out == null) {
        out = false;
      }
      OpenSquare.__super__.animate.call(this, out);
      this.out = out;
      if (!out) {
        this.clear();
      }
      this.startDraw();
      this.ctx.moveTo(this.lineWidth / 2, this.size[0] - this.lineWidth);
      a = {
        w: 0
      };
      TweenMax.to(a, .3, {
        w: this.size[0] - this.lineWidth,
        delay: 1 - parseInt(out),
        ease: "easeInQuart",
        onUpdate: (function(_this) {
          return function() {
            _this.ctx.lineTo(_this.lineWidth / 2, _this.size[0] - a.w);
            return _this.ctx.stroke();
          };
        })(this),
        onComplete: (function(_this) {
          return function() {
            a = {
              w: 0
            };
            return TweenMax.to(a, .3, {
              w: _this.size[0],
              ease: "easeOutQuart",
              onUpdate: function() {
                _this.ctx.lineTo(_this.lineWidth / 2 + a.w, _this.lineWidth);
                return _this.ctx.stroke();
              },
              onComplete: _this.animateLine2
            });
          };
        })(this)
      });
      return null;
    };

    OpenSquare.prototype.animateLine2 = function() {
      var a, h;
      this.gradColor = Config.GRADIENTS[Math.round(Math.random() * (Config.GRADIENTS.length - 1))];
      this.grad = this.ctx.createLinearGradient(0, 0, this.size[0], 0);
      this.grad.addColorStop(0, this.gradColor[0]);
      this.grad.addColorStop(1, this.gradColor[1]);
      h = this.size[1] - this.lineWidth;
      this.ctx.beginPath();
      this.ctx.strokeStyle = this.grad;
      this.ctx.moveTo(0, h);
      a = {
        w: 0
      };
      return TweenMax.to(a, .3, {
        w: this.size[0],
        ease: "easeInQuart",
        onUpdate: (function(_this) {
          return function() {
            _this.ctx.lineTo(a.w - _this.lineWidth / 2, h);
            return _this.ctx.stroke();
          };
        })(this),
        onComplete: (function(_this) {
          return function() {
            a = {
              w: h
            };
            return TweenMax.to(a, .3, {
              w: 65,
              ease: "easeOutQuart",
              onUpdate: function() {
                _this.ctx.lineTo(_this.size[0] - _this.lineWidth / 2, a.w);
                return _this.ctx.stroke();
              },
              onComplete: function() {
                if (!_this.out) {
                  return setTimeout(_this.animate, 2000, true);
                } else {
                  return _this.resetShowAnim();
                }
              }
            });
          };
        })(this)
      });
    };

    return OpenSquare;

  })(BasicObject);

  module.exports = OpenSquare;

}).call(this);
