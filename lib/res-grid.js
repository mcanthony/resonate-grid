// Generated by CoffeeScript 1.9.1
(function() {
  var Comma, Cross, CrossX, DiagonalLine, Grid, HalfSquare, OpenSquare, PIXI, ResGrid, SemiCircle, StrokeCircle, TweenMax, Utils, raf,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StrokeCircle = require('./objects/StrokeCircle');

  OpenSquare = require('./objects/OpenSquare');

  Comma = require('./objects/Comma');

  HalfSquare = require('./objects/HalfSquare');

  SemiCircle = require('./objects/SemiCircle');

  DiagonalLine = require('./objects/DiagonalLine');

  Cross = require('./objects/Cross');

  CrossX = require('./objects/CrossX');

  Grid = require('./grid/Grid');

  Utils = require('./utils/Utils');

  PIXI = require('pixi');

  TweenMax = require('gsap');

  raf = require('raf');

  ResGrid = (function() {
    ResGrid.prototype.view = null;

    ResGrid.prototype.grid = null;

    ResGrid.prototype.renderer = null;

    ResGrid.prototype.stage = null;

    ResGrid.prototype.current = -1;

    ResGrid.prototype.currentObject = -1;

    ResGrid.prototype.shapes = null;

    ResGrid.prototype.objs = null;

    ResGrid.prototype.gridSize = 5;

    ResGrid.prototype.maxHeight = 2500;

    ResGrid.prototype.showGrid = true;

    function ResGrid(showGrid, optimalSize, gridSize, maxHeight) {
      this.showGrid = showGrid;
      if (optimalSize == null) {
        optimalSize = true;
      }
      this.gridSize = gridSize != null ? gridSize : 5;
      this.maxHeight = maxHeight != null ? maxHeight : 2500;
      this.resize = bind(this.resize, this);
      this.render = bind(this.render, this);
      this.updateShape = bind(this.updateShape, this);
      this.update = bind(this.update, this);
      this.changeGridPos = bind(this.changeGridPos, this);
      this.randomAdd = bind(this.randomAdd, this);
      this.getNextCurrentObject = bind(this.getNextCurrentObject, this);
      this.getNextCurrent = bind(this.getNextCurrent, this);
      this.getGridPosition = bind(this.getGridPosition, this);
      this.addShapes = bind(this.addShapes, this);
      this.toggleGrid = bind(this.toggleGrid, this);
      this.draw = bind(this.draw, this);
      this.togglePlay = bind(this.togglePlay, this);
      this.init = bind(this.init, this);
      this.getOptimalMaxSize = bind(this.getOptimalMaxSize, this);

      /*
      hack pixi to draw gradient on sprites
       */
      PIXI.Texture.Draw = (function(_this) {
        return function(cb) {
          var canvas;
          canvas = document.createElement('canvas');
          if (typeof cb === 'function') {
            cb(canvas);
          }
          return PIXI.Texture.fromCanvas(canvas);
        };
      })(this);

      /*
      end hack
       */
      if (optimalSize) {
        this.getOptimalMaxSize();
      }
      this.init();
      null;
    }

    ResGrid.prototype.getOptimalMaxSize = function() {
      if (window.devicePixelRatio > 1) {
        this.maxHeight = 2500;
        this.gridSize = 5;
      } else {
        this.maxHeight = 4500;
        this.gridSize = 7;
      }
      return null;
    };

    ResGrid.prototype.init = function() {
      var boxes, full, h, ref, w;
      PIXI.dontSayHello = true;
      ref = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
      full = ref;
      boxes = Math.floor(full / this.gridSize) - 2;
      full = boxes * this.gridSize;
      w = ref;
      h = Math.max(this.maxHeight, ref);
      this.stage = new PIXI.Stage();
      this.renderer = new PIXI.CanvasRenderer(w, h, null, {
        transparent: true,
        antialias: true
      });
      this.view = this.renderer.view;
      this.draw();
      return null;
    };

    ResGrid.prototype.togglePlay = function() {
      this.playing = !this.playing;
      this.grid.playing = this.playing;
      return null;
    };

    ResGrid.prototype.draw = function() {
      this.grid = new Grid(this.gridSize, this.gridSize * 2, this.showGrid);
      this.stage.addChild(this.grid.grid);
      this.addShapes();
      this.update();
      return null;
    };

    ResGrid.prototype.toggleGrid = function() {
      this.showGrid = !this.showGrid;
      this.grid.showGrid = this.showGrid;
      return null;
    };

    ResGrid.prototype.addShapes = function() {
      var a, i, j, k, l, maxObjects, ref, ref1, ref2, ref3;
      this.shapes = [];
      this.positions = [];
      for (i = j = 0, ref1 = Math.pow(this.gridSize, 2); 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        this.positions.push(i);
      }
      for (i = k = 0, ref2 = Math.pow(this.gridSize, 2); 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        this.shapes.push(0);
      }
      this.positions = Utils.shuffle(this.positions);
      ref = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
      ref /= this.gridSize;
      ref /= 1.5;
      this.objs = [
        {
          clazz: StrokeCircle,
          params: [this.renderer, ref, ref, this.changeGridPos]
        }, {
          clazz: OpenSquare,
          params: [this.renderer, 125, 192, this.changeGridPos]
        }, {
          clazz: Comma,
          params: [this.renderer, 158, 54, this.changeGridPos]
        }, {
          clazz: HalfSquare,
          params: [this.renderer, ref, ref, this.changeGridPos]
        }, {
          clazz: SemiCircle,
          params: [this.renderer, ref, ref, this.changeGridPos]
        }, {
          clazz: DiagonalLine,
          params: [this.renderer, 95, 16, this.changeGridPos]
        }, {
          clazz: Cross,
          params: [this.renderer, ref, ref, this.changeGridPos]
        }, {
          clazz: CrossX,
          params: [this.renderer, ref, ref, this.changeGridPos]
        }
      ];
      this.objs = Utils.shuffle(this.objs);
      maxObjects = Math.round(this.positions.length / (this.gridSize - 2));
      for (i = l = 0, ref3 = maxObjects; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
        this.getNextCurrentObject();
        a = new this.objs[this.currentObject].clazz(this.objs[this.currentObject].params);
        this.randomAdd(a);
      }
      return null;
    };

    ResGrid.prototype.getGridPosition = function() {
      var gridH, gridW, modX, modY, ref;
      modX = this.positions[this.current] % this.gridSize;
      modY = Math.floor(this.positions[this.current] / this.gridSize);
      ref = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
      gridW = ref / this.gridSize;
      gridH = ref / this.gridSize;
      return {
        x: (modX * gridW) + gridW / 2,
        y: (modY * gridH) + gridH / 2
      };
    };

    ResGrid.prototype.getNextCurrent = function() {
      this.current++;
      if (this.current > this.positions.length - 1) {
        this.current = 0;
      }
      return null;
    };

    ResGrid.prototype.getNextCurrentObject = function() {
      this.currentObject++;
      if (this.currentObject > this.objs.length - 1) {
        this.currentObject = 0;
      }
      return null;
    };

    ResGrid.prototype.randomAdd = function(obj) {
      this.changeGridPos(obj);
      this.stage.addChild(obj.g);
      return null;
    };

    ResGrid.prototype.changeGridPos = function(obj) {
      var cc, pos;
      this.getNextCurrent();
      cc = this.positions[this.current];
      if (this.shapes[cc] === 0) {
        if (obj.id) {
          this.shapes[obj.id] = 0;
        }
        pos = this.getGridPosition();
        obj.g.position = new PIXI.Point(pos.x - obj.width() / 2, pos.y - obj.height() / 2);
        obj.g.x = pos.x - obj.width() / 2;
        obj.g.y = pos.y - obj.height() / 2;
        obj.id = cc;
        this.shapes[cc] = obj;
      } else {
        this.changeGridPos(obj);
      }
      return null;
    };

    ResGrid.prototype.update = function() {
      this.updateShape(this.grid.update());
      this.render();
      raf(this.update);
      return null;
    };

    ResGrid.prototype.updateShape = function(array) {
      var i, j, len;
      if (array == null) {
        array = [];
      }
      for (j = 0, len = array.length; j < len; j++) {
        i = array[j];
        if ((this.shapes[i] != null) && this.shapes[i] !== 0) {
          this.shapes[i].callAnimate();
        }
      }
      return null;
    };

    ResGrid.prototype.render = function() {
      this.renderer.render(this.stage);
      return null;
    };

    ResGrid.prototype.resize = function() {
      var boxes, full, h, ref, w;
      ref = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;
      full = ref;
      boxes = Math.floor(full / this.gridSize) - 2;
      full = boxes * this.gridSize;
      w = ref;
      h = Math.max(this.maxHeight, ref);
      h = full >= this.maxHeight ? this.maxHeight : full;
      this.renderer.resize(w, h);
      this.grid.resize();
      return null;
    };

    return ResGrid;

  })();

  module.exports = ResGrid;

}).call(this);
